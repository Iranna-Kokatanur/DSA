class NodeValue{
    public int minNode, maxNode, maxSize;
    
    NodeValue(int m, int n, int o){
        minNode = m;
        maxNode = n;
        maxSize = o;
    }
}

class Solution{
    
    // Return the size of the largest sub-tree which is also a BST
    
    
    
    public static NodeValue largestBinaryTreeHelper(Node root){
        if(root == null) return new NodeValue(Integer.MAX_VALUE, Integer.MIN_VALUE, 0);
        
        NodeValue left = largestBinaryTreeHelper(root.left);
        NodeValue right = largestBinaryTreeHelper(root.right);
        
        if(left.maxNode < root.data && root.data < right.minNode){
            return new NodeValue(Math.min(root.data, left.minNode), Math.max(root.data, right.maxNode), 1 + left.maxSize + right.maxSize);
        }
        
        return new NodeValue(Integer.MIN_VALUE, Integer.MAX_VALUE, Math.max(left.maxSize , right.maxSize));
    }
    
    static int largestBst(Node root)
    {
        // Write your code here
        return largestBinaryTreeHelper(root).maxSize;
        
    }
    
}
