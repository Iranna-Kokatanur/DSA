class GfG
{
    //Function to return a tree created from postorder and inoreder traversals.
    Node buildTree(int in[], int post[], int n) {
        
        Map<Integer, Integer> inMap = new HashMap<>();
        for(int i = 0; i<in.length; i++){
            inMap.put(in[i], i);
        }
        
        return buildTree(in, 0, in.length - 1, post, 0, post.length - 1, inMap);
    }
    
    Node buildTree(int in[], int inStart, int inEnd, int post[], int postStart, int postEnd, Map<Integer, Integer> inMap){
        
        if(postStart>postEnd || inStart>inEnd) return null;
        Node root = new Node(post[postEnd]);
        
        int inRoot = inMap.get(root.data);
        int numsLeft = inRoot - inStart;
        
        root.left = buildTree(in, inStart, inRoot - 1, post, postStart, postStart + numsLeft - 1, inMap);
        root.right = buildTree(in, inRoot + 1, inEnd, post, postStart + numsLeft, postEnd - 1, inMap);
        
        return root;
    }
}
