import java.util.Arrays;

public class InsertionSort {
	
	public static void main(String[] args) {
		int arr[] = {3, 2, 3, 4, 5};
		quicksort(arr, 0, arr.length - 1);
		//best case : o(nlogn) pivot in middle, worst: o(n2) when pivot in last.
    //timsort: mergesort + insertionsort - not stable
		System.out.println(Arrays.toString(arr));
	}
	
	
	public static void quicksort(int [] arr, int low, int high) {
		if(low >= high) return;
		
		int s = low;
		int e = high;
		int m = (s + e)/2;
		int pivot = arr[m];
		
		//The numbers left to pivot should be less, other should be greater than it.
		while(s <= e) {
			while(arr[s] < pivot) {
				s++;
			}
			while(arr[e] > pivot) {
				e--;
			}
			if(s<=e) {
				int temp = arr[s];
				arr[s] = arr[e];
				arr[e] = temp;
				s++;
				e--;
			}
		}
		
		//made the half 
		quicksort(arr, low, e);
		quicksort(arr, s, high);
	}
	
}
