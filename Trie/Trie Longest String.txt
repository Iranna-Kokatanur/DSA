
//Trie implementation for insert, startsWith, search

class Node{
	Node[] links = new Node[26];
	boolean flag = false;
	
	public Node() {
		
	}
	
	boolean containsKey(char ch) {
		return links[ch - 'a'] != null;
	}
	
	void put(char ch, Node node) {
		links[ch - 'a'] = node;
	}
	
	Node get(char ch) {
		return links[ch - 'a'];
	}
	
	void setEnd() {
		this.flag = true;
	}
	
	boolean isEnd() {
		return this.flag;
	}
}
public class Trie {
	
	private Node root;
	
	Trie(){
		root = new Node();
	}
	
	void insert(String word) {
		
		Node node = root;
		for(int i = 0; i<word.length(); i++) {
			if(!node.containsKey(word.charAt(i))) {
				node.put(word.charAt(i), new Node());
			}
			
			node = node.get(word.charAt(i));
		}
		
		node.setEnd();
	}
	
	boolean search(String word) {
		
		Node node = root;
		
		for(int i = 0; i<word.length(); i++) {
			if(!node.containsKey(word.charAt(i))) {
				return false;
			}
			
			node = node.get(word.charAt(i));
		}
		
		return node.isEnd();
	}
	
	
	//o(length)
	boolean startsWith(String prefix) {
		Node node = root;
		
		for(int i = 0; i<prefix.length(); i++) {
			if(!node.containsKey(prefix.charAt(i))) {
				return false;
			}
			
			node = node.get(prefix.charAt(i));
		}
		
		return true;
	}
	
	boolean isAllPrefixExist(String word) {
		
		Node node = root;
		for(int i = 0; i<word.length(); i++) {
			if(node.containsKey(word.charAt(i))) {
				node = node.get(word.charAt(i));
				if(!node.isEnd()) return false;
			}else {
				return false;
			}
		}
		
		return true;
	}
	
	public static void main(String[] args) {
		Trie trie = new Trie();
		
		String[] words = {"n", "ninja", "ninj", "ni", "nin", "ninga"};
		
		for(String word: words) {
			trie.insert(word);
		}
		
		String longest = "";
		
		for(String word: words) {
			if(trie.isAllPrefixExist(word)) {
				if(word.length() > longest.length()) {
					longest = word;
				}else if(word.length() == longest.length() && word.compareTo(longest) < 0) {
					longest = word;
				}
			}
		}
		
		System.out.println("Longest word: "+longest);
		
	}

}
