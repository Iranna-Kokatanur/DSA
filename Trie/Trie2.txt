

////Trie implementation for insert, countWordStartingWith, erase, countWordEqualsTo

public class Trie2 {
	
	class Node{
		Node[] links = new Node[26];
		int cntEndWith = 0;
		int cntPrefix = 0;
		
		public Node() {
			
		}
		
		boolean containsKey(char ch) {
			return links[ch - 'a'] != null;
		}
		
		void put(char ch, Node node) {
			links[ch - 'a'] = node;
		}
		
		Node get(char ch) {
			return links[ch - 'a'];
		}
		
		void increaseEnd() {
			this.cntEndWith++;
		}
		
		void increasePrefix() {
			this.cntPrefix++;
		}
		
		void deleteEnd() {
			this.cntEndWith--;
		}
		
		void reducePrefix() {
			this.cntPrefix--;
		}
		
		int getPrefix() {
			return this.cntPrefix;
		}
		
		int getEnd() {
			return this.cntEndWith;
		}
		
	}
	
	public Node root;
	
	Trie2(){
		this.root = new Node();
	}
	
	void insert(String word) {
		Node node = root;
		
		for(int i = 0; i<word.length(); i++) {
			char ch = word.charAt(i);
			
			if(!node.containsKey(ch)) {
				node.put(ch, new Node());
			}
			
			node = node.get(ch);
			node.increasePrefix();
		}
		
		node.increaseEnd();
	}
	
	int countWordEqualsTo(String word) {
		Node node = root;
		for(int i = 0; i<word.length(); i++) {
			char ch = word.charAt(i);
			
			if(!node.containsKey(ch)) {
				return 0;
			}
			
			node = node.get(ch);
		}
		
		return node.getEnd();
	}
	
	int countWordStartingWith(String word) {
		Node node = root;
		for(int i = 0; i<word.length(); i++) {
			char ch = word.charAt(i);
			
			if(!node.containsKey(ch)) {
				return 0;
			}
			
			node = node.get(ch);
		}
		
		return node.getPrefix();
	}
	
	void erase(String word) {
		Node node = root;
		
		for(int i = 0; i<word.length(); i++) {
			char ch = word.charAt(i);
			if(!node.containsKey(ch)) {
				return;
			}
			node = node.get(ch);
			node.reducePrefix();
		}
		
		node.deleteEnd();
		
	}
	
	public static void main(String[] args) {
		Trie2 trie = new Trie2();
		trie.insert("apple");
		trie.insert("apple");
		trie.insert("apps");
		
		System.out.println(trie.countWordEqualsTo("apple"));
		System.out.println(trie.countWordStartingWith("app"));
		
		trie.erase("apps");
		System.out.println(trie.countWordStartingWith("app"));
		
	}

}
