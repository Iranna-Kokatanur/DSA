
public class Trie3 {
	
	class Node{
		Node[] links = new Node[26];
		boolean flag = false;
		
		public Node() {
			
		}
		
		boolean containsKey(char ch) {
			return links[ch - 'a'] != null;
		}
		
		void put(char ch, Node node) {
			links[ch - 'a'] = node;
		}
		
		Node get(char ch) {
			return links[ch - 'a'];
		}
		
		void setEnd() {
			this.flag = true;
		}
		
		boolean isEnd() {
			return this.flag;
		}
	}

	private Node root;
	int count;
	
	Trie3(){
		root = new Node();
	}
	
	void insert(String word) {
		
		Node node = root;
		for(int i = 0; i<word.length(); i++) {
			if(!node.containsKey(word.charAt(i))) {
				node.put(word.charAt(i), new Node());
				this.count++;
			}
			
			node = node.get(word.charAt(i));
		}
		
		node.setEnd();
	}
	
	int distinctSubstrings(String word) {
		
		int cnt = 0;
		Node node = null;
		
		for(int i = 0; i<word.length(); i++) {
			node = root;
			
			for(int j = i; j<word.length(); j++) {
				char ch = word.charAt(j);
				if(!node.containsKey(ch)) {
					node.put(ch, new Node());
					cnt++;
				}
				
				node = node.get(ch);
			}
		}
		
		return cnt + 1;
	}
	
	public static void main(String[] args) {
		
		String word = "abab";
		
		Trie3 trie = new Trie3();
		
		System.out.println(trie.distinctSubstrings(word));
		
	}
}
