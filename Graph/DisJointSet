// Online Java Compiler
// Use this editor to write, compile and run your Java code online
// o(4alpha)
import java.util.*;
class DisJointSet{
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    //rank is set to 0, parent it to itself
    public DisJointSet(int n){
        for(int i = 0; i<=n; i++){
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }
    
    //Path compression - Find Ultimate parent of node.
    public int findUltimateParent(int node){
        if(node == parent.get(node)){
            return node;
        }
        
        int ultimate_parent = findUltimateParent(parent.get(node));
        parent.set(node, ultimate_parent);
        
        return parent.get(node);
    }
    
    //Union Of All / Making a Tree
    /*
        1. If they belongs to same component, no need to create node
        2. If attch the node of rank with lower to the higher node
        3. if rank is same for both the nodes, attch the nodes 
            in any manner and increase the rank of parent
        
        Two methods for union:
        1.Union By Rank
        2.Union By Size
    */
    
    public void unionByRank(int u, int v){
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        
        //Belonging to the same component
        if(ulp_u == ulp_v) return;
        
        if(rank.get(ulp_u) < rank.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
        }else if(rank.get(ulp_v) < rank.get(ulp_u)){
            parent.set(ulp_v, ulp_u);
        }else{
            parent.set(ulp_v, ulp_u);
            int rank_u = rank.get(ulp_u);
            rank.set(ulp_u, rank_u);
        }
    }
    
    public void unionBySize(int u, int v){
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        
        //Belonging to the same component
        if(ulp_u == ulp_v) return;
        
        if(size.get(ulp_u) < size.get(ulp_v)){
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_u)+size.get(ulp_u));
        }else{
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_v)+size.get(ulp_u));
        }
    }
}
class HelloWorld {
    public static void main(String[] args) {
        DisJointSet ds = new DisJointSet(7);
        // ds.unionByRank(1, 2);
        // ds.unionByRank(2, 3);
        // ds.unionByRank(4, 5);
        // ds.unionByRank(6, 7);
        // ds.unionByRank(5, 6);
        ds.unionBySize(1, 2);
        ds.unionBySize(2, 3);
        ds.unionBySize(4, 5);
        ds.unionBySize(6, 7);
        ds.unionBySize(5, 6);
        //If 3 and 7 have same parent
        if(ds.findUltimateParent(3) == ds.findUltimateParent(7)){
            System.out.println("They Have Same Ultimate Parent");
        }else{
            System.out.println("They Do Not Have Ultimate Parent");
        }
        // ds.unionByRank(3, 7);
        ds.unionBySize(3, 7);
         if(ds.findUltimateParent(3) == ds.findUltimateParent(7)){
            System.out.println("They Have Same Ultimate Parent");
        }else{
            System.out.println("They Do Not Have Ultimate Parent");
        }
    }
}
