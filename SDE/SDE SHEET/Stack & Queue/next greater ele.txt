class Solution
{
    //Function to find the next greater element for each element of the array.
    public static long[] nextLargerElement(long[] arr, int n)
    { 
        long[] nge = new long[n];
        Arrays.fill(nge, -1);
        
        Stack<Long> st = new Stack<>();
        
        //2n-1 for circular array ( For last element it has to look from the first to find its greater element)
        for(int i = n - 1; i>=0; i--){
            // Remove the smaller
            while(!st.isEmpty() && st.peek() <= arr[i]) st.pop();
            
            if(!st.isEmpty()) nge[i] = st.peek();
            
            st.push(arr[i]);
        }
        
        return nge;
    } 
}



class Solution
{
    //Function to find the next greater element for each element of the array.
    public static long[] nextLargerElement(long[] arr, int n)
    { 
        long[] nge = new long[n];
        Arrays.fill(nge, -1);
        
        Stack<Long> st = new Stack<>();
        
        //2n-1 for circular array ( For last element it has to look from the first to find its greater element)
        for(int i = 2 * n - 1; i>=0; i--){
            // Remove the smaller
            while(!st.isEmpty() && st.peek() <= arr[i%n]) st.pop();
            
            if(i<n)
                if(!st.isEmpty()) nge[i] = st.peek();
            
            st.push(arr[i%n]);
        }
        
        return nge;
    } 
}
