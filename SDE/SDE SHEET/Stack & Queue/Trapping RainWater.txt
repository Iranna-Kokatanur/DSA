class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int a[], int n) { 
        
        long ans = 0;
        
        int l = 0;
        int r = n - 1;
        
        long leftMax = 0;
        long rightMax = 0;
        
        while(l <= r){
            if(a[l] <= a[r]){
                if(a[l] >= leftMax) leftMax = a[l];
                else ans += leftMax - a[l];
                l++;
            }else{
                if(a[r] >= rightMax) rightMax = a[r];
                else ans += rightMax - a[r];
                r--;
            }
        }
        
        return ans;
        
    } 
}









// Better Soln

import java.util.*;
class TUF {
    static int trap(int[] arr) {
        int n = arr.length;
        int prefix[] = new int[n];
        int suffix[] = new int[n];
        prefix[0] = arr[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = Math.max(prefix[i - 1], arr[i]);
        }
        suffix[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = Math.max(suffix[i + 1], arr[i]);
        }
        int waterTrapped = 0;
        for (int i = 0; i < n; i++) {
            waterTrapped += Math.min(prefix[i], suffix[i]) - arr[i];
        }
        return waterTrapped;
    }

    public static void main(String args[]) {
        int arr[] = {0,1,0,2,1,0,1,3,2,1,2,1};
        System.out.println("The duplicate element is " + trap(arr));
    }
}
Output: The water that can be trapped is 6
