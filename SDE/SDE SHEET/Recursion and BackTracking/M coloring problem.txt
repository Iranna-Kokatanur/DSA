class solve {
    // Function to determine if graph can be coloured with at most M colours
    // such
    // that no two adjacent vertices of graph are coloured with same colour.
    
    public boolean isSafe(int node, int c, boolean[][] graph, int[] color, int n){
        
        for(int i = 0; i<n; i++){
            if(i != node && color[i] == c && graph[i][node]) return false;
        }
        return true;
    }
    
    public boolean graphColoring(int node, int[] color, int m, int n, boolean[][] graph){
        
        if(node == n) return true;
        
        for(int i = 1; i<=m; i++){
            if(isSafe(node, i, graph, color, n)){
                color[node] = i;
                if(graphColoring(node + 1, color, m, n, graph)) return true;
                color[node] = 0;
            }
        }
        
        return false;
    }
    public boolean graphColoring(boolean graph[][], int m, int n) {
        // Your code here
        
        int color[] = new int[n];
        
        for(int i = 0; i<n; i++) color[i] = 0;
        
        if(graphColoring(0, color, m, n, graph)) return true;
        
        return false;
    }
    
    
}
