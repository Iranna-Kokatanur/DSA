class Solution
{   
    public boolean dfs(int row, int col, int[][] vis, char[][] board, String word, int index){
        
        if(index == word.length()){
            return true;
        }
        vis[row][col] = 1;
        
        int n = board.length;
        int m = board[0].length;
        
        int[] drow = {-1, 0, 1, 0};
        int [] dcol = {0, 1, 0, -1};
        
        for(int i = 0; i<4; i++){
            int nrow = row + drow[i];
            int ncol = col + dcol[i];
            
            if(nrow < n && nrow >= 0 && ncol >= 0 && ncol < m && vis[nrow][ncol] == 0){
                if(board[nrow][ncol] == word.charAt(index)){
                    if(dfs(nrow, ncol, vis, board, word, index + 1)) {
                        return true;
                    }
                }
            }
        }
        
        vis[row][col] = 0;
        return false;
    }
    public boolean isWordExist(char[][] board, String word)
    {
        int n = board.length;
        int m = board[0].length;
        
        int [][] vis = new int[n][m];
        
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                vis[i][j] = 0;
            }
        }
        
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[0].length; j++){
                if(word.charAt(0) == board[i][j] && vis[i][j] == 0){
                    if(dfs(i, j, vis, board, word, 1)) return true;
                }else{
                    
                }
            }
        }
        
        return false;
    }
}
