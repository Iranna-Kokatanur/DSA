class Solution {
    ListNode reverseLinkedList(ListNode head){
        ListNode dummy = null, next = null;

        while(head != null){
            next = head.next;
            head.next = dummy;
            dummy = head;
            head = next;
        }

        return dummy;
    }
    public boolean isPalindrome(ListNode head) {

        if(head == null || head.next == null) return true;
        ListNode slow = head;
        ListNode fast = head;

        //Find the middle of the linkedlist
        while(fast.next != null && fast.next.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }

        //reverse the right half
        slow.next = reverseLinkedList(slow.next);

        // check the right half is now is equal to right half or not

        slow = slow.next;

        while(slow != null){
            if(head.val != slow.val) return false;
            slow = slow.next;
            head = head.next;
        }

        return true;
    }
}
